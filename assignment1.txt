Scenarios: 

1. Hiking
 1.1. Rent a ReachNow to drive to mountain rainier on weekends with friends
 1.2. On the way, fill the gas
 1.3. On the way, eat at restaurant for lunch
 1.4. Buy the ticket to get into the park
 1.5. Book a hotel or check in the hotel.
 
Things:
 
	Traveler:
		Data: name, hungry, cash
		Behaviors: fillGas, eat, drive

	CarRental:
		Data: name, modelAndRemains, modelAndPrice
		Behaviors: charge, refund

	Car:
		Data: model, gasRemain, 
		Behaviors: move, getRefilled
		
	GasStation:
		Data: prices,
		Behaviors: charge

	Restaurant:
		Data: food, 
		Behaviors: charge

	Park: 
		Data: ticketPrice, distance
		Behaviors: charge
		
	Hotel:
		Data: rooms
		Behaviors: reserve, charge
		
Hiking pseudo code:
	
	Traveler Kian, David, Anne-Marie;
	CarRental ReachNow;
	if ReachNow.modelAndRemains.get("subaru") > 0
		Car subaru;
	GasStation someGas
	Restaurant FishNChips
	Park mtRainierNP
	Hotel yhaHostel
		
	cost = ReachNow.modelAndPrice.get("subaru") * 2;
	ReachNow.charge(cost, Kian.cash);
	if yhaHostel.rooms > 0
		days = 1
		yhaHostel.reserve("Kian", days);
		yhaHostel.charge(Kian.cash, days);
	mtRainierNP.charge(Kian.cash, mtRainierNP.ticketPrice * 3);

	while ( mtRainierNP.distance > 0) 
		mtRainierNP.distance -= Kian.drive(subaru);
		subaru.gasRemain -= subaru.move()
		if( Kian.hungry == true || David.hungry == true || Anne-Marie.hungry == true)
			Kian.eat("fish");
			David.eat(fries");
			Anne-Marie.eat("fish");
			Kian.hungry = false;
			David.hungry = false;
			Anne-Marie.hungry = false;
			cost = FishNChips.food["fish"] * 2 + FishNChips.food["fries"];
			FishNChips.charge(Kian.cash, cost);
		if(gasRemain < 10)
			subaru.getRefilled(40);
			someGas.charge(Kian.cash, prices * 40);


2. Organise a career fair(Suppose you are the organiser):
 2.1 Send invitations to companys; send notifications to students;
 2.2 Make statistics on the total number of companies and students;
 2.3 Rent a site for host the fair; make sure the room is big enough;
 2.4 On the career fair day, keep the students inside the room less than the capacity;
 2.5 Finish the fair after all students leave. 
 
Things:
	CareerFair
		Data: name, isOpen, isClosed
		Behaviors: open, close
		
	Organiser
		Data: name, 
		Behaviors: invite, notify, rentRoom, 
	
	Room:
		Data: capacity, boothNumber
		Behaviors:
		
	Company:
		Data: name, headCounts, recruitedList
		Behaviors: interview
		
	Student:
		Data: name, grade, keenToFindJobs, targetCompanys, offers, skills
		Behaviors: 
	
		
Pseudo codes:
	
	Organiser Kian;
	Room room1, room2, room3;
	Company google, facebook, nordstrom, zillow, linkedin, ...
	Student stu1, stu2, stu3, ...
	CareerFair sep17CareerFair
	
	companies = [ google, facebook, nordstrom, ... ]
	students = [ stu1, stu2, stu3, ...]
	rooms = [room1, room2, room3]
	int companyWillCome = [], studentWillCome = []
	String selectedRoom
	
	for loop ( company in companies )
		if company.headCounts > 0
			companyWillCome.add(company)
	
	for loop ( student in students ) 
		if student.keenToFindJobs == true
			studentWillCome.add(student)
	
	for loop( room in rooms) 
		if room.boothNumber >= companyWillCome.size()
			selectedRoom = room
		else
			throwExeption "Oops, we need bigger place!"
	
	// On the career fair day
	sep17CareerFair.open()
	while loop ( studentWillCome.size() > 0 )
		studentWalkIn = [];
		int index = 0;
		if( studentWillCome.size() > room.capacity )
			studentWalkIn = studentWillCome.subArray(index, index+500)
			studentWillCome = studentWillCome.subArray(index + 500, student.size)
		else 
			studentWalkIn = studentWillCome;
			studentWillCome = []
		
		for loop ( company in companyWillCome) 
			for loop( student in studentWalkIn)
				if student.targetCompanys.has(company.name)
					result = company.interview(student.skills)
					if result = "passed"
						company.recruitedList.add(student.name)
						student.offers.add(company.name)
		
		if time is later than 18.00pm 
			break;
			
	sep17CareerFair.close()
		
		
 
3. Order Pizza from Pizza Hut
 3.1 call Pizza Hut to order pizza
 3.2 check the menu and pick pizzas
 3.3 pay and end the call
 
Things:
	Person:
		Data: name, hungry, desiredFood
		Behaviors: pay, call, endCall
		
	Restaurant:
		Data: name, menu
		Behaviors: confirmOrder, deliverOrder
		
Pseudo code:
	
	Person Kian
	Restaurant pizzaHut
	
	if Kian.hungry == true
		Kian.call(pizzaHut)
		for loop ( food in desiredFood )
			if pizzaHut.menu.has(food)
				price = pizzaHut.menu[food]
				payment = Kian.pay(price)
				if payment == "success"
					pizzaHut.confirmOrder()
					Kian.endCall()
					pizzaHut.deliverOrder()
					break
				else
					throwExeption "Not enough money to pay for " + food
		
		


4. Design a code sharing platform (eg: Github).
 4.1 Authorize user information
 4.2 Create new repositories 
 4.3 Star repos
 4.4 Follow others
 
CodeSharingPlatform:
	Data: users, activeUser, isLogedIn = false, 
	Behaviors: 
		main = () {
			Loop check user has loged in or not
				if isLogedIn == true
					break
				logIn() or signUp()
			
			showOverview(activeUser)
			if create new repo
				activeUser.newRepo
			if star repo
				activeUser.starRepo
			if follow other users
				activeUser.follow
		}
		
		logIn = () {
			retrieve username and password from user input
			Authorization auth;
			isLogedIn = auth.authorize(username, password)
			activeUser = users.get(username)
		}
		
		signUp = () {
			retrieve username and password from user input
			User newUser
			newUser.add(username, password)
			users.add(username, newUser)
			Authorization auth
			auth.signUp(username, password)			
		}
		
		showOverview = (user) {
			print user.repos user.starredRepos user.followList
		}
			
Authorization: 
	Data: userInfo
	Behaviors:
		authorize = (username, password) {
			if users has username:
				check password:
					if password is correct:
						return true
					else 
						print("wrong password.")
						return false
			else 
				print("user doesn't exist.")
				return false
		}
		
		signUp =(username, password) {
			if users don't have username:
				add username and password into users
			else print("Username existed.")
		}
User:
	Data: name, password, repos, starredRepos, followList
	Behaviors:
		addName = (n, p) {
			name = n,
			password = p
		}
		
		newRepo = (name) {
			Repository repo 
			repos.add(name, repo)
		}
		
		starRepo = (name) {
			starredRepos.add(name)
		}
		
		follow = (name) {
			followList.add(name)
		}
		
Repository:
	Data: name, code, readMe, stars
	Behaviors:
		introduce = () {
			print readMe
		}
	
		getStarred = () {
			stars ++
		}
		
		

5. Design a soft-drink/snacks vending machine.
 5.1 display inventory and price
 5.2 get what is chosen by customer
 5.3 receiveMoney and return changes
 5.4 update inventory
 
VendingMachine:
	Data: money, inventory,
	Behaviors:
		main = () {
			display inventory and price
			if customer choose any goods
				if inventory.goods.number > 0
					print "Please insert $" + inventory.goods.price
					if receiveMoney() == true
						give the goods to customer
						inventory.goods.number --
						reset machine
					else reset machine
				else 
					print "Sorry, sold out."
					reset machine
			
		}
		
		receiveMoney = (cash) {
			change = cash - price
			if change < money
				money = money - cash
				give change to customer
				return true
			else 
				print "Sorry, not enough change"
				give back the cash to customer
				return false
		}
	
	
	
	

